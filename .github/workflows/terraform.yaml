name: "Terraform Infrastructure Change Management Pipeline with GitHub Actions"

on:
 push:
   branches:
   - main
   - develop
   paths:
   - deploy/tf/**
 pull_request:
   branches:
   - main
   paths:
   - deploy/tf/**

env:
 # verbosity setting for Terraform logs
 TF_VAR_ssh_key: ${{ secrets.SSH_KEY}}
 TF_VAR_ya_key: ${{ secrets.YA_KEY}}
 TF_VAR_ya_file_enc: ${{ secrets.YA_FILE_ENC}}
 TF_VAR_ya_token: ${{ secrets.YA_KEY}}
 BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
 terraform:
   name: "Terraform Infrastructure Change Management"
   runs-on: self-hosted
   defaults:
     run:
       shell: bash
       # We keep Terraform files in the terraform directory.
       working-directory: deploy/tf

   steps:
     - name: Checkout the repository to the runner
       uses: actions/checkout@v2

     - name: Setup Terraform with specified version on the runner
       uses: hashicorp/setup-terraform@v2
       with:
         terraform_version: 1.3.5

     - name: secret
       id: decode
       run: |
           echo $TF_VAR_ya_file_enc | base64 -d > key

     - name: Terraform init
       id: init
       run: terraform init -reconfigure --backend-config "access_key=$TF_VAR_ya_key" --backend-config "secret_key=$TF_VAR_ya_token"


     - name: Terraform validate
       id: validate
       run: terraform validate

     - name: set workspace
       id: workspace
       run: terraform workspace select $BRANCH_NAME

     - name: Terraform plan
       id: plan
       run: terraform plan -no-color -input=false
       continue-on-error: true

     - uses: actions/github-script@v6
       if: github.event_name == 'pull_request'
       env:
         PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
       with:
         script: |
           const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
           #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
           #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
           #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

           <details><summary>Show Plan</summary>

           \`\`\`\n
           ${process.env.PLAN}
           \`\`\`

           </details>
           *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

           github.rest.issues.createComment({
             issue_number: context.issue.number,
             owner: context.repo.owner,
             repo: context.repo.repo,
             body: output
           })

     - name: Terraform Plan Status
       if: steps.plan.outcome == 'failure'
       run: exit 1

     - name: Terraform Apply
       #if: github.ref == 'refs/heads/main' && github.event_name == 'push'
       run: terraform apply -auto-approve -input=false
